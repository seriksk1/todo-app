{"ast":null,"code":"import axios from \"axios\";\nimport { getSortedTasks, getUpdatedStatus } from \"./sorting\";\nimport { ACTION } from \"../constants\";\nconst api = axios.create({\n  baseURL: `http://localhost:3001/api`\n});\nexport const addTaskSuccess = item => ({\n  type: ACTION.ADD_TASK,\n  payload: item\n});\nexport const removeTaskSuccess = id => ({\n  type: ACTION.REMOVE_TASK,\n  payload: id\n});\nexport const setTaskStatusSuccess = item => ({\n  type: ACTION.SET_TASK_STATUS,\n  payload: item\n});\nexport const setSortType = id => ({\n  type: ACTION.SET_SORT_TYPE,\n  payload: id\n});\nexport const setTasks = items => ({\n  type: ACTION.SET_TASKS,\n  payload: items\n});\nexport const addTask = item => dispatch => {\n  api.post(\"/task\", item).then(res => {\n    dispatch(addTaskSuccess(res.data.item));\n  }).catch(err => console.log(err));\n};\nexport const removeTask = id => dispatch => {\n  dispatch(removeTaskSuccess(id));\n  api.delete(`/task/${id}`).then(res => {\n    console.log(res);\n  }).catch(err => console.log(err));\n};\nexport const setTaskStatus = item => dispatch => {\n  const updatedStatus = getUpdatedStatus(item);\n  console.log(updatedStatus);\n  api.patch(`/task/${item._id}`, {\n    status: updatedStatus\n  }).then(res => {\n    console.log(res.data.status);\n    dispatch(setTaskStatusSuccess(res.data.item));\n  }).catch(err => console.log(err));\n};\nexport const fetchTasks = sortType => dispatch => {\n  api.get(\"/tasks\").then(({\n    data\n  }) => {\n    const items = data.data;\n    dispatch(setTasks(getSortedTasks(items, sortType)));\n  }).catch(err => {\n    dispatch(setTasks([]));\n  });\n};","map":{"version":3,"sources":["/home/developer/Public/Projects/todo-app/client/src/redux/actions/tasks.js"],"names":["axios","getSortedTasks","getUpdatedStatus","ACTION","api","create","baseURL","addTaskSuccess","item","type","ADD_TASK","payload","removeTaskSuccess","id","REMOVE_TASK","setTaskStatusSuccess","SET_TASK_STATUS","setSortType","SET_SORT_TYPE","setTasks","items","SET_TASKS","addTask","dispatch","post","then","res","data","catch","err","console","log","removeTask","delete","setTaskStatus","updatedStatus","patch","_id","status","fetchTasks","sortType","get"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { getSortedTasks, getUpdatedStatus } from \"./sorting\";\nimport { ACTION } from \"../constants\";\n\nconst api = axios.create({\n  baseURL: `http://localhost:3001/api`,\n});\n\nexport const addTaskSuccess = (item) => ({\n  type: ACTION.ADD_TASK,\n  payload: item,\n});\n\nexport const removeTaskSuccess = (id) => ({\n  type: ACTION.REMOVE_TASK,\n  payload: id,\n});\n\nexport const setTaskStatusSuccess = (item) => ({\n  type: ACTION.SET_TASK_STATUS,\n  payload: item,\n});\n\nexport const setSortType = (id) => ({\n  type: ACTION.SET_SORT_TYPE,\n  payload: id,\n});\n\nexport const setTasks = (items) => ({\n  type: ACTION.SET_TASKS,\n  payload: items,\n});\n\nexport const addTask = (item) => (dispatch) => {\n  api\n    .post(\"/task\", item)\n    .then((res) => {\n      dispatch(addTaskSuccess(res.data.item));\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const removeTask = (id) => (dispatch) => {\n  dispatch(removeTaskSuccess(id));\n  api\n    .delete(`/task/${id}`)\n    .then((res) => {\n      console.log(res);\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const setTaskStatus = (item) => (dispatch) => {\n  const updatedStatus = getUpdatedStatus(item);\n\n  console.log(updatedStatus);\n\n  api\n    .patch(`/task/${item._id}`, { status: updatedStatus })\n    .then((res) => {\n      console.log(res.data.status);\n      dispatch(setTaskStatusSuccess(res.data.item));\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const fetchTasks = (sortType) => (dispatch) => {\n  api\n    .get(\"/tasks\")\n    .then(({ data }) => {\n      const items = data.data;\n      dispatch(setTasks(getSortedTasks(items, sortType)));\n    })\n    .catch((err) => {\n      dispatch(setTasks([]));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}