{"ast":null,"code":"var _jsxFileName = \"/home/developer/Public/Projects/todo-app/client/src/components/custom/AddTaskForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\"; // import TextField from \"@material-ui/core/TextField\";\n// import Button from \"@material-ui/core/Button\";\n\nimport { TextField, Button } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  form: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  textField: {\n    width: \"80%\",\n    marginBottom: 30\n  },\n  addTaskBtn: {\n    width: 150\n  }\n});\n\nfunction AddTaskForm({\n  onCloseModal,\n  onAddTask\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [isFormValid, setIsFormValid] = useState(false);\n  const [formInput, setFormInput] = useState({\n    status: \"pending\",\n    task: \"\",\n    dueDate: \"\"\n  });\n\n  const isInputValid = value => {\n    return value.length >= 3 ? true : value === \"\" ? null : false;\n  };\n\n  const checkFormValidation = obj => {\n    let isValid = Object.values(obj).map(value => isInputValid(value)).every(isValid => isValid);\n    setIsFormValid(isValid);\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    if (isFormValid) {\n      handleAddTask(formInput);\n      onCloseModal();\n    }\n  };\n\n  function handleInput(e) {\n    const id = e.target.id;\n    const newValue = e.target.value;\n    setFormInput(prev => ({ ...prev,\n      [id]: newValue\n    }));\n  }\n\n  const handleAddTask = obj => {\n    onAddTask(obj);\n  }; // const getHelperText = () => {};\n  // const isInputError = () => {};\n\n\n  useEffect(() => {\n    checkFormValidation(formInput);\n  }, [formInput]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: handleFormSubmit,\n    noValidate: true,\n    autoComplete: \"off\",\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      id: \"task\",\n      error: isInputValid(formInput.task) === false ? true : null,\n      className: classes.textField,\n      onChange: handleInput,\n      label: \"Task\",\n      variant: \"outlined\",\n      helperText: isInputValid(formInput.task) ? null : \"At least 3 symbols\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      id: \"dueDate\",\n      error: isInputValid(formInput.dueDate) === false ? true : null,\n      className: classes.textField,\n      onChange: handleInput,\n      type: \"date\",\n      label: \"Due-date\",\n      InputLabelProps: {\n        shrink: true\n      },\n      helperText: isInputValid(formInput.dueDate) ? null : \"Choose date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.addTaskBtn,\n      type: \"submit\",\n      size: \"large\",\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"OK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddTaskForm, \"Ys9jmyD5KUSRjVDTI8bKYeX78uc=\", false, function () {\n  return [useStyles];\n});\n\n_c = AddTaskForm;\nexport default AddTaskForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddTaskForm\");","map":{"version":3,"sources":["/home/developer/Public/Projects/todo-app/client/src/components/custom/AddTaskForm.jsx"],"names":["useEffect","useState","makeStyles","TextField","Button","useStyles","form","width","display","flexDirection","alignItems","textField","marginBottom","addTaskBtn","AddTaskForm","onCloseModal","onAddTask","classes","isFormValid","setIsFormValid","formInput","setFormInput","status","task","dueDate","isInputValid","value","length","checkFormValidation","obj","isValid","Object","values","map","every","handleFormSubmit","e","preventDefault","handleAddTask","handleInput","id","target","newValue","prev","shrink"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,mBAA3B,C,CAEA;AACA;;AAEA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAC;AAC3BI,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,OAAO,EAAE,MAFL;AAGJC,IAAAA,aAAa,EAAE,QAHX;AAIJC,IAAAA,UAAU,EAAE;AAJR,GADqB;AAO3BC,EAAAA,SAAS,EAAE;AACTJ,IAAAA,KAAK,EAAE,KADE;AAETK,IAAAA,YAAY,EAAE;AAFL,GAPgB;AAW3BC,EAAAA,UAAU,EAAE;AACVN,IAAAA,KAAK,EAAE;AADG;AAXe,CAAD,CAA5B;;AAgBA,SAASO,WAAT,CAAqB;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA;AAAhB,CAArB,EAAkD;AAAA;;AAChD,QAAMC,OAAO,GAAGZ,SAAS,EAAzB;AAEA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAM,CAACmB,SAAD,EAAYC,YAAZ,IAA4BpB,QAAQ,CAAC;AACzCqB,IAAAA,MAAM,EAAE,SADiC;AAEzCC,IAAAA,IAAI,EAAE,EAFmC;AAGzCC,IAAAA,OAAO,EAAE;AAHgC,GAAD,CAA1C;;AAMA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,WAAOA,KAAK,CAACC,MAAN,IAAgB,CAAhB,GAAoB,IAApB,GAA2BD,KAAK,KAAK,EAAV,GAAe,IAAf,GAAsB,KAAxD;AACD,GAFD;;AAIA,QAAME,mBAAmB,GAAIC,GAAD,IAAS;AACnC,QAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcH,GAAd,EACXI,GADW,CACNP,KAAD,IAAWD,YAAY,CAACC,KAAD,CADhB,EAEXQ,KAFW,CAEJJ,OAAD,IAAaA,OAFR,CAAd;AAGAX,IAAAA,cAAc,CAACW,OAAD,CAAd;AACD,GALD;;AAOA,QAAMK,gBAAgB,GAAIC,CAAD,IAAO;AAC9BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAInB,WAAJ,EAAiB;AACfoB,MAAAA,aAAa,CAAClB,SAAD,CAAb;AACAL,MAAAA,YAAY;AACb;AACF,GAND;;AAQA,WAASwB,WAAT,CAAqBH,CAArB,EAAwB;AACtB,UAAMI,EAAE,GAAGJ,CAAC,CAACK,MAAF,CAASD,EAApB;AACA,UAAME,QAAQ,GAAGN,CAAC,CAACK,MAAF,CAASf,KAA1B;AACAL,IAAAA,YAAY,CAAEsB,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAW,OAACH,EAAD,GAAME;AAAjB,KAAX,CAAD,CAAZ;AACD;;AAED,QAAMJ,aAAa,GAAIT,GAAD,IAAS;AAC7Bb,IAAAA,SAAS,CAACa,GAAD,CAAT;AACD,GAFD,CApCgD,CAwChD;AACA;;;AAEA7B,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,mBAAmB,CAACR,SAAD,CAAnB;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;AAIA,sBACE;AACE,IAAA,SAAS,EAAEH,OAAO,CAACX,IADrB;AAEE,IAAA,QAAQ,EAAE6B,gBAFZ;AAGE,IAAA,UAAU,MAHZ;AAIE,IAAA,YAAY,EAAC,KAJf;AAAA,4BAME,QAAC,SAAD;AACE,MAAA,EAAE,EAAC,MADL;AAEE,MAAA,KAAK,EAAEV,YAAY,CAACL,SAAS,CAACG,IAAX,CAAZ,KAAiC,KAAjC,GAAyC,IAAzC,GAAgD,IAFzD;AAGE,MAAA,SAAS,EAAEN,OAAO,CAACN,SAHrB;AAIE,MAAA,QAAQ,EAAE4B,WAJZ;AAKE,MAAA,KAAK,EAAC,MALR;AAME,MAAA,OAAO,EAAC,UANV;AAOE,MAAA,UAAU,EAAEd,YAAY,CAACL,SAAS,CAACG,IAAX,CAAZ,GAA+B,IAA/B,GAAsC,oBAPpD;AAQE,MAAA,QAAQ;AARV;AAAA;AAAA;AAAA;AAAA,YANF,eAiBE,QAAC,SAAD;AACE,MAAA,EAAE,EAAC,SADL;AAEE,MAAA,KAAK,EAAEE,YAAY,CAACL,SAAS,CAACI,OAAX,CAAZ,KAAoC,KAApC,GAA4C,IAA5C,GAAmD,IAF5D;AAGE,MAAA,SAAS,EAAEP,OAAO,CAACN,SAHrB;AAIE,MAAA,QAAQ,EAAE4B,WAJZ;AAKE,MAAA,IAAI,EAAC,MALP;AAME,MAAA,KAAK,EAAC,UANR;AAOE,MAAA,eAAe,EAAE;AACfK,QAAAA,MAAM,EAAE;AADO,OAPnB;AAUE,MAAA,UAAU,EAAEnB,YAAY,CAACL,SAAS,CAACI,OAAX,CAAZ,GAAkC,IAAlC,GAAyC;AAVvD;AAAA;AAAA;AAAA;AAAA,YAjBF,eA6BE,QAAC,MAAD;AACE,MAAA,SAAS,EAAEP,OAAO,CAACJ,UADrB;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,OAAO,EAAC,WAJV;AAKE,MAAA,KAAK,EAAC,SALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyCD;;GAxFQC,W;UACST,S;;;KADTS,W;AA0FT,eAAeA,WAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\n\n// import TextField from \"@material-ui/core/TextField\";\n// import Button from \"@material-ui/core/Button\";\n\nimport { TextField, Button } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  form: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  textField: {\n    width: \"80%\",\n    marginBottom: 30,\n  },\n  addTaskBtn: {\n    width: 150,\n  },\n});\n\nfunction AddTaskForm({ onCloseModal, onAddTask }) {\n  const classes = useStyles();\n\n  const [isFormValid, setIsFormValid] = useState(false);\n\n  const [formInput, setFormInput] = useState({\n    status: \"pending\",\n    task: \"\",\n    dueDate: \"\",\n  });\n\n  const isInputValid = (value) => {\n    return value.length >= 3 ? true : value === \"\" ? null : false;\n  };\n\n  const checkFormValidation = (obj) => {\n    let isValid = Object.values(obj)\n      .map((value) => isInputValid(value))\n      .every((isValid) => isValid);\n    setIsFormValid(isValid);\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    if (isFormValid) {\n      handleAddTask(formInput);\n      onCloseModal();\n    }\n  };\n\n  function handleInput(e) {\n    const id = e.target.id;\n    const newValue = e.target.value;\n    setFormInput((prev) => ({ ...prev, [id]: newValue }));\n  }\n\n  const handleAddTask = (obj) => {\n    onAddTask(obj);\n  };\n\n  // const getHelperText = () => {};\n  // const isInputError = () => {};\n\n  useEffect(() => {\n    checkFormValidation(formInput);\n  }, [formInput]);\n\n  return (\n    <form\n      className={classes.form}\n      onSubmit={handleFormSubmit}\n      noValidate\n      autoComplete=\"off\"\n    >\n      <TextField\n        id=\"task\"\n        error={isInputValid(formInput.task) === false ? true : null}\n        className={classes.textField}\n        onChange={handleInput}\n        label=\"Task\"\n        variant=\"outlined\"\n        helperText={isInputValid(formInput.task) ? null : \"At least 3 symbols\"}\n        required\n      />\n\n      <TextField\n        id=\"dueDate\"\n        error={isInputValid(formInput.dueDate) === false ? true : null}\n        className={classes.textField}\n        onChange={handleInput}\n        type=\"date\"\n        label=\"Due-date\"\n        InputLabelProps={{\n          shrink: true,\n        }}\n        helperText={isInputValid(formInput.dueDate) ? null : \"Choose date\"}\n      />\n      <Button\n        className={classes.addTaskBtn}\n        type=\"submit\"\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        OK\n      </Button>\n    </form>\n  );\n}\n\nexport default AddTaskForm;\n"]},"metadata":{},"sourceType":"module"}