{"ast":null,"code":"var _jsxFileName = \"/home/developer/Public/Projects/todo-app/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport \"./App.css\";\nimport { Grid, Button, Modal, Typography } from \"@material-ui/core\";\nimport { AddTaskFormContainer, SortPopupContainer, TaskListContainer, ModalContainer } from \"./components\";\nimport { fetchTasks, addTask, removeTask, setTaskStatus, setSortType } from \"./redux/actions/tasks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  mainContainer: {\n    marginTop: 20\n  },\n  addTaskBtn: {\n    width: 150\n  },\n  modal: {\n    alignItems: \"center\",\n    margin: \"150px auto\",\n    width: 400,\n    maxHeight: 450,\n    paddingBottom: 30,\n    backgroundColor: \"#f8f8f8\",\n    border: \"2px solid #000\",\n    boxShadow: \"#0f0f0f\"\n  },\n  modalTitle: {\n    width: \"100%\",\n    margin: \"20px 0\",\n    fontSize: 32,\n    textAlign: \"center\"\n  }\n});\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const sortTypes = [{\n    id: 1,\n    type: \"Due-date\"\n  }, {\n    id: 2,\n    type: \"Status\"\n  }];\n  const {\n    items,\n    sortType\n  } = useSelector(({\n    tasks\n  }) => tasks);\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleOpenModal = () => {\n    setOpenModal(true);\n  };\n\n  const onCloseModal = () => {\n    setOpenModal(false);\n  };\n\n  const onSelectType = id => {\n    dispatch(setSortType(id));\n  };\n\n  const onAddTask = obj => {\n    dispatch(addTask(obj));\n  };\n\n  useEffect(() => {\n    dispatch(fetchTasks(sortType));\n  }, [sortType]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: classes.mainContainer,\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      className: classes.addTaskBtn,\n      onClick: handleOpenModal,\n      size: \"large\",\n      variant: \"contained\",\n      color: \"primary\",\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SortPopupContainer, {\n      sortType: sortType,\n      items: sortTypes,\n      onSelectType: onSelectType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), items.length ? /*#__PURE__*/_jsxDEV(TaskListContainer, {\n      items: items\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.modalTitle,\n      children: \"You don't have any tasks yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openModal,\n      onClose: onCloseModal,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        className: classes.modal,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.modalTitle,\n          children: \"New Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AddTaskFormContainer, {\n          onAddTask: onAddTask,\n          onCloseModal: onCloseModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lPCo2LtjiUI0Rci5ZoOzV5Po9+A=\", false, function () {\n  return [useDispatch, useStyles, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/developer/Public/Projects/todo-app/client/src/App.js"],"names":["useSelector","useDispatch","useEffect","useState","makeStyles","Grid","Button","Modal","Typography","AddTaskFormContainer","SortPopupContainer","TaskListContainer","ModalContainer","fetchTasks","addTask","removeTask","setTaskStatus","setSortType","useStyles","mainContainer","marginTop","addTaskBtn","width","modal","alignItems","margin","maxHeight","paddingBottom","backgroundColor","border","boxShadow","modalTitle","fontSize","textAlign","App","dispatch","classes","sortTypes","id","type","items","sortType","tasks","openModal","setOpenModal","handleOpenModal","onCloseModal","onSelectType","onAddTask","obj","length"],"mappings":"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","sourcesContent":["import { useSelector, useDispatch } from \"react-redux\";\nimport { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport \"./App.css\";\n\nimport { Grid, Button, Modal, Typography } from \"@material-ui/core\";\nimport {\n  AddTaskFormContainer,\n  SortPopupContainer,\n  TaskListContainer,\n  ModalContainer,\n} from \"./components\";\n\nimport {\n  fetchTasks,\n  addTask,\n  removeTask,\n  setTaskStatus,\n  setSortType,\n} from \"./redux/actions/tasks\";\n\nconst useStyles = makeStyles({\n  mainContainer: {\n    marginTop: 20,\n  },\n  addTaskBtn: {\n    width: 150,\n  },\n  modal: {\n    alignItems: \"center\",\n    margin: \"150px auto\",\n    width: 400,\n    maxHeight: 450,\n    paddingBottom: 30,\n\n    backgroundColor: \"#f8f8f8\",\n    border: \"2px solid #000\",\n    boxShadow: \"#0f0f0f\",\n  },\n  modalTitle: {\n    width: \"100%\",\n    margin: \"20px 0\",\n    fontSize: 32,\n    textAlign: \"center\",\n  },\n});\n\nfunction App() {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n\n  const sortTypes = [\n    { id: 1, type: \"Due-date\" },\n    { id: 2, type: \"Status\" },\n  ];\n\n  const { items, sortType } = useSelector(({ tasks }) => tasks);\n  const [openModal, setOpenModal] = useState(false);\n\n  const handleOpenModal = () => {\n    setOpenModal(true);\n  };\n\n  const onCloseModal = () => {\n    setOpenModal(false);\n  };\n\n  const onSelectType = (id) => {\n    dispatch(setSortType(id));\n  };\n\n  const onAddTask = (obj) => {\n    dispatch(addTask(obj));\n  };\n\n  useEffect(() => {\n    dispatch(fetchTasks(sortType));\n  }, [sortType]);\n\n  return (\n    <Grid\n      className={classes.mainContainer}\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n    >\n      <Button\n        className={classes.addTaskBtn}\n        onClick={handleOpenModal}\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n      >\n        Add Task\n      </Button>\n\n      <SortPopupContainer\n        sortType={sortType}\n        items={sortTypes}\n        onSelectType={onSelectType}\n      />\n      {items.length ? (\n        <TaskListContainer items={items} />\n      ) : (\n        <Typography className={classes.modalTitle}>\n          You don't have any tasks yet\n        </Typography>\n      )}\n\n      <Modal open={openModal} onClose={onCloseModal}>\n        <Grid container direction=\"column\" className={classes.modal}>\n          <Typography className={classes.modalTitle}>New Task</Typography>\n          <AddTaskFormContainer\n            onAddTask={onAddTask}\n            onCloseModal={onCloseModal}\n          />\n        </Grid>\n      </Modal>\n    </Grid>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}